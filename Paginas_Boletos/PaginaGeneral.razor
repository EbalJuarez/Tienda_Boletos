@page "/general"
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@using PaginaDeBoletos
@using PaginaDeBoletos.Clases
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>Pagina general</PageTitle>

<EditForm Model="@boleto" OnValidSubmit="@guardar">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="Contenedor-sesion">
        <div class="form-container">
            <p class="title">Compra General</p>
            <p>Boletos disponibles: @General.Boletos_General</p>
            <p>Ingrese los datos solicitados</p>
            <div class="form">
                <div class="input-group">
                    <label for="nombre">Nombre:</label>
                    <InputText placeholder="" id="nombre" @bind-Value="boleto.Nombre" style="width: 100%; border-radius: 0.375rem; border: 1px solid rgba(55, 65, 81, 1); outline: 0; background-color: rgba(17, 24, 39, 1); padding: 0.75rem 1rem; color: rgba(243, 244, 246, 1);" />
                    <ValidationMessage For="() => boleto.Nombre" />
                </div>
                <div class="input-group">
                    <label for="dpi">DPI:</label>
                    <InputText placeholder="" id="dpi" @bind-Value="boleto.DPI" style="width: 100%; border-radius: 0.375rem; border: 1px solid rgba(55, 65, 81, 1); outline: 0; background-color: rgba(17, 24, 39, 1); padding: 0.75rem 1rem; color: rgba(243, 244, 246, 1);" />
                    <ValidationMessage For="() => boleto.DPI" />
                    <label for="correo">Correo electronico:</label>
                    <InputText placeholder="" id="correo" @bind-Value="boleto.Correo" style="width: 100%; border-radius: 0.375rem; border: 1px solid rgba(55, 65, 81, 1); outline: 0; background-color: rgba(17, 24, 39, 1); padding: 0.75rem 1rem; color: rgba(243, 244, 246, 1);" />
                    <ValidationMessage For="() => boleto.Correo" />
                    <label for="correo">Cantidad boletos:</label>
                    <InputNumber placeholder="" id="correo" @bind-Value="boleto.cantidad_boletos" style="width: 100%; border-radius: 0.375rem; border: 1px solid rgba(55, 65, 81, 1); outline: 0; background-color: rgba(17, 24, 39, 1); padding: 0.75rem 1rem; color: rgba(243, 244, 246, 1);" />
                    <ValidationMessage For="() => boleto.cantidad_boletos" />
                </div>
                <button style="margin-top:6%;" class="sign" type="submit">Comprar</button>
            </div>
            <div class="social-message">
                <div class="line"></div>
                <p class="message">Se generará un código QR con su número correlativo. Presione 'Descargar' una vez que esté disponible.</p>
                <div class="line"></div>
            </div>
        </div>
    </div>
</EditForm>

<div class="imagenQR">
    <img src="@imagen" />
   
</div>
<a href="@imagen" download="@($"{boleto.Nombre}.png")" class="fancy-button">
    Descargar
</a>

@code {

    private General boleto = new General();
    private List<General> Lista_Boletos_General = new List<General>();
    string? imagen;

    private async Task  guardar()
    {
        boleto.Fecha_Compra = DateTime.Now;
        boleto.Numero_correlativo = int.Parse(Transaccion.NoCorrelativo(boleto.DPI.ToString(), 3));
        boleto.Zona = "General";
        if (boleto.cantidad_boletos <= General.Boletos_General)
        {
            Transaccion.Cola_General.Enqueue(boleto);

            ProcesarCola();


        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Recuperar la lista de starships desde LocalStorage a una variable var
        var savedGeneral = localStorage.GetItem<List<General>>("Registro_General");

        // Validar si la lista fue recuperada correctamente, copiarla a la lista
        if (savedGeneral != null)
        {
            Lista_Boletos_General = savedGeneral;

        }
        foreach (var can in Lista_Boletos_General)
        {
            General.Boletos_General = 100 - can.cantidad_boletos;
        }
    }

    private void ProcesarCola()
    {
        while (Transaccion.Cola_General.Count > 0)
        {
            var siguiente = Transaccion.Cola_General.Dequeue();
            imagen = Transaccion.Generar_QR(siguiente.Numero_correlativo.ToString());
            General.Boletos_General -= boleto.cantidad_boletos;
            Lista_Boletos_General.Add(siguiente);

            localStorage.SetItem("Registro_General", Lista_Boletos_General);
        }
    }
}