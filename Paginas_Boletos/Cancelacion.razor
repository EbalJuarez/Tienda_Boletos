@page "/cancelar"
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@using PaginaDeBoletos
@using Bolx.Clases
<PageTitle>Pagina Cancelar</PageTitle>
@if (Lista_Boletos_General.Any() || Lista_Boletos_Platino.Any() || Lista_Boletos_Tribuna.Any() || Lista_Boletos_Vip.Any())
{
    <EditForm Model="@cancelar" OnValidSubmit="@cancelarx">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="Contenedor-sesion">
            <div class="form-container">
                <p class="title">Cancelar compra</p>
                <div class="form">
                    <div class="input-group">
                        <label for="nombre">Nombre:</label>
                        <InputText placeholder="" id="nombre" @bind-Value="cancelar.nombre" style="width: 100%; border-radius: 0.375rem; border: 1px solid rgba(55, 65, 81, 1); outline: 0; background-color: rgba(17, 24, 39, 1); padding: 0.75rem 1rem; color: rgba(243, 244, 246, 1);" />
                        <ValidationMessage For="() => cancelar.nombre" />
                    </div>
                    <div class="input-group">
                        <label for="dpi">DPI:</label>
                        <InputText placeholder="" id="dpi" @bind-Value="cancelar.dpi" style="width: 100%; border-radius: 0.375rem; border: 1px solid rgba(55, 65, 81, 1); outline: 0; background-color: rgba(17, 24, 39, 1); padding: 0.75rem 1rem; color: rgba(243, 244, 246, 1);" />
                        <ValidationMessage For="() => cancelar.dpi" />
                    </div>

                    <button style="margin-top:6%;" class="sign" type="submit">Cancelar</button>
                </div>
                <div class="social-message">
                    <div class="line"></div>
                    <p class="message">Ingrese los datos solicitados</p>
                    <div class="line"></div>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div style="color: darkorange; font-weight: bold; text-align: center; margin-top: 20px;">
        ⚠️ No hay compras registradas
    </div>

}

@code {

    private Cancelar cancelar = new Cancelar();
    private List<General> Lista_Boletos_General = new List<General>();
    private List<MesasPlatino> Lista_Boletos_Platino = new List<MesasPlatino>();
    private List<VIP> Lista_Boletos_Vip = new List<VIP>();
    private List<Tribuna> Lista_Boletos_Tribuna = new List<Tribuna>();

    private void cancelarx()
    {
        Cancelar.Pila_Cancelacion.Push(cancelar);

        var cancelacionActual = Cancelar.Pila_Cancelacion.Peek();

        foreach (var bol in Lista_Boletos_Platino.ToList()) 
        {
            if (cancelacionActual.nombre == bol.Nombre && cancelacionActual.dpi == bol.DPI)
            {
                MesasPlatino.Boletos_Mesas_Platino += bol.cantidad_boletos;  
                Lista_Boletos_Platino.Remove(bol);
                localStorage.SetItem("Registro_Platino", Lista_Boletos_Platino);
            }
        }

        foreach (var bol in Lista_Boletos_General.ToList())
        {
            if (cancelacionActual.nombre == bol.Nombre && cancelacionActual.dpi == bol.DPI)
            {
                General.Boletos_General += bol.cantidad_boletos;
                Lista_Boletos_General.Remove(bol);
                localStorage.SetItem("Registro_General", Lista_Boletos_General);
            }
        }

        foreach (var bol in Lista_Boletos_Tribuna.ToList())
        {
            if (cancelacionActual.nombre == bol.Nombre && cancelacionActual.dpi == bol.DPI)
            {
                Tribuna.Boletos_Tribuna += bol.cantidad_boletos;
                Lista_Boletos_Tribuna.Remove(bol);
                localStorage.SetItem("Registro_Tribuna", Lista_Boletos_Tribuna);
            }
        }

        foreach (var bol in Lista_Boletos_Vip.ToList())
        {
            if (cancelacionActual.nombre == bol.Nombre && cancelacionActual.dpi == bol.DPI)
            {
                VIP.Boletos_Vip += bol.cantidad_boletos;
                Lista_Boletos_Vip.Remove(bol);
                localStorage.SetItem("Registro_Vip", Lista_Boletos_Vip);
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        // Recuperar la lista de starships desde LocalStorage a una variable var
        var savedGeneral = localStorage.GetItem<List<General>>("Registro_General");
        var savedVip = localStorage.GetItem<List<VIP>>("Registro_Vip");
        var savedTribuna = localStorage.GetItem<List<Tribuna>>("Registro_Tribuna");
        var savedPlatino = localStorage.GetItem<List<MesasPlatino>>("Registro_Platino");
        // Validar si la lista fue recuperada correctamente, copiarla a la lista
        if (savedGeneral != null)
        {
            Lista_Boletos_General = savedGeneral;   
            
        }
        if(savedPlatino != null)
        {
            Lista_Boletos_Platino = savedPlatino;
        }
        if(savedTribuna != null)
        {
            Lista_Boletos_Tribuna = savedTribuna;
        }
        if(savedVip != null)
        {
            Lista_Boletos_Vip = savedVip;
        }

    }
}